####Docker ecosystem####

Images - The blueprints of our application which form the basis of containers. In the demo above, we used the docker pull command to download the busybox image.
Containers - Created from Docker images and run the actual application. We create a container using docker run which we did using the busybox image that we downloaded. A list of running containers can be seen using the docker ps command.
Docker Daemon - The background service running on the host that manages building, running and distributing Docker containers. The daemon is the process that runs in the operating system to which clients talk to.
Docker Client - The command line tool that allows the user to interact with the daemon. More generally, there can be other forms of clients too - such as Kitematic which provide a GUI to the users.
Docker Hub - A registry of Docker images. You can think of the registry as a directory of all available Docker images. If required, one can host their own Docker registries and can use them for pulling images.

Many other good examples: https://github.com/wsargent/docker-cheat-sheet 

docker run  
--rm --> remove container automatically after it exits
-it --> connect the container to terminal
--name web  --> name the container
-p 5000:80 --> expose port 5000 externally and map to port 80
-v ~/dev:/code --> create a host mapped volume inside the container
alpine:3.4 --> the image from which the container is instantiated
/bin/sh --> the command to run inside the container

docker stop web --> stop the web containter
docker start web --> start the web containter
docker pull ubuntu --> pull Ubuntu docker Image
docker images --> list all images available

docker ps --> shows you all containers that are currently running
docker ps -a --> shows the list of all containers that have been run in the past with the status (exited..)
docker run -it busybox sh --> run command with the -it flags attaches us to an interactive tty in the container
docker run --rm busybox --> removes container as soon as it exits
docker run -d -P --name static-site prakhar1989/static-site -->   -d Detached -P expose random TCP ports --name Name 
docker run -p 8888:80 prakhar1989/static-site --> run docker container on -p defined ports
docker exec -it e3d31e6ab1dc bash  --> Create a new bash process inside the container and connect it to the terminal

###Cleanup containers after running###
docker rm 305297d7a235 ff0a5c3750b9
docker rm $(docker ps -a -q -f status=exited) --> for many exited container
docker container prune --> the same effect as docker remove all - This will remove all stopped containers.
###Clean Images that are not use
docker rmi $(docker ps -q)
###Clean all untagged images###
docker rmi -f $(docker images | grep "<none>" | awk "{print \$3}")

docker tag alpine:3.4 myrepo/myalpine:3.4 --> Retag a local image with a new image name and tag
docker logs --tail 100 8015eaa039d2 --> Tail docker logs of a container


